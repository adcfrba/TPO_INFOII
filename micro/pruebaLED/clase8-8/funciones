#define NO_KEY 0xFF
#define EST_ESTABLE 10

uint8_t bufferTeclado = NO_KEY;
uint8_t contadorEstados = 0;

void systick_handler(void) //esto esta corriendo cada 1ms
{
	teclado();
}

void teclado (void)
{
	uint8_t tecla;
	tecla = tecladoHW();
	tecladoSW(tecla);
}

uint8_t tecladoHW(void)
{
	if(!GPIO_Read(tec0))
		return 0;
	
	if(!GPIO_Read(tec1))
		return 1;
		
	return NO_KEY;
	
}

void tecladoSW(uint8_t codigoActual)
{
	static uint8_t codigoAnterior; //como una global pero vive solo en esta funcion
	
	if(codigoActual == NO_KEY) //si no se aprieta ninguna tecla, se resetea todo
	{
		contadorEstados = 0;
		codigoAnterior = NO_KEY;
		return;
	}
	
	if (contadorEstados == 0) // si es la primera vez que se aprieta y no es NO_KEY
	{
		contadorEstados++;
		codigoAnterior = codigoActual;
	}
	
	if (codigoActual != codigoAnterior) //hubo ruido, se debe resetar
	{
		contadorEstados = 0;
		codigoAnterior = NO_KEY;
		return;
	}
	
	if (contadorEstados == EST_ESTABLE) //cuando llega al valor de verificaci√≥n, ya esta filtrado
	{
		bufferTeclado = codigoActual;
		contadorEstados++;
		return;
	}
	
	if(contadorEstados == EST_ESTABLE + 1)
	{
		//para realizar repeticiones
		return;
	}
	
	contadorEstados++; //si sigue siendo la misma lectura
	
}

uint8_t getKey (void)
{
	uint8_t teclaLeida;
	
	teclaLeida = bufferTeclado; // se guarda el valor filtrado, luego de los 10 estados estables
	bufferTeclado = NO_KEY;
	
	return (teclaLeida);
}

int main (void)
{
	uint8_t tec;
	uint32_t flag = 0;
	
	while(1)
	{
		tec = getKey();
		
		if(tec != NO_KEY)
			flag++;
			
}